import subprocess


class WifiPasswordGrabber:
    # class constructor
    def __init__(self):
        # Array of strings to be fed to subprocess as a command
        command_string = ['netsh', 'wlan', 'show', 'profiles']
        # run the command above then decode the output following cp1252 standard.
        #  Split each word of the output onto a new line and save the result as a list of strings
        profiles_raw = subprocess.check_output(command_string).decode('cp1252').split('\n')
        # Check each item from the above list for "All User Profile"
        #  If a match is found then split and grab the second string (profile name). Remove the first and last character
        #  Save all matches in a string list
        self.profiles = [profile.split(":")[1][1:-1] for profile in profiles_raw if "All User Profile" in profile]

    # prints any found wi-fi passwords to the console.
    def print_wifi_passwords(self):
        for profile in self.profiles:
            command_string = ['netsh', 'wlan', 'show', 'profile', profile, 'key=clear']
            # builds a list of individual Wi-fi profile details
            profile_details = subprocess.check_output(command_string).decode('cp1252').split('\n')
            # Looks for wi-fi keys in each profile detail.
            found_keys = [key.split(":")[1][1:-1] for key in profile_details if "Key Content" in key]
            # TODO: clean these print statements up
            try:
                print("{:<30}|  {:<}".format(profile, found_keys[0]))
            except IndexError:
                print("{:<30}|  {:<}".format(profile, ""))

    # TODO: build a method for returning a list of wi-fi passwords instead of printing to the console.
    def get_wifi_passwords(self) -> list:
        key_val = []
        for profile in self.profiles:
            command_string = ['netsh', 'wlan', 'show', 'profile', profile, 'key=clear']
            # builds a list of individual Wi-fi profile details
            profile_details = subprocess.check_output(command_string).decode('cp1252').split('\n')
            # Looks for wi-fi keys in each profile detail.
            found_keys = [key.split(":")[1][1:-1] for key in profile_details if "Key Content" in key]
            # TODO: combine found_keys with profile in some meaningful way, key value pair maybe?
            #  Must be usable outside of the for loop
            key_val.append([profile, found_keys])

        return key_val
