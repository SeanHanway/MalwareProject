
from PluginManager import PluginManager


class CLI:
    def __init__(self, plugin_dir: str):
        self.plugin_dir = plugin_dir

    def run(self):
        print("Welcome to ViruManager!...")
        print("Please enter your plugin directory or leave empty for the default location:")
        print("Default location: " + self.plugin_dir)
        user_dir = input()

        if user_dir:
            self.plugin_dir = user_dir

        print("Grabbing plugins...")
        virus_manager = PluginManager(self.plugin_dir)
        plugins = virus_manager.get_plugins()
        print("Which flavour of virus would you like today?")
        print("...")

        iterator = 1
        for plugin in plugins:
            print(iterator.__str__() + ": " + plugin)
            iterator += 1
        # @TODO add ability to select a virus using the corresponding number

        user_choice = input()
        plugin = ''

        while not user_choice.isdigit():
            print("Please enter a number...")
            user_choice = input()

        try:
            plugin = plugins[int(user_choice) - 1]

        except IndexError as e:
            print("Invalid Selection.")
            print("Press any key to exit...")
            input()
            exit()

        print("How would you like to run the plugin?")
        print("1: Standard")
        print("2: Autorun")
        print("3: Undo")

        run_type = input()
        valid = False

        while not valid:
            if run_type == '1' or run_type == '2' or run_type == '3':
                valid = True
            else:
                print("Please enter a valid response, 1 | 2 | 3")
                run_type = input()

        if run_type == '1':
            virus_manager.run_plugin(plugin, virus_manager.CONST_RUN)
        elif run_type == '2':
            virus_manager.run_plugin(plugin, virus_manager.CONST_AUTORUN)
        elif run_type == '3':
            virus_manager.run_plugin(plugin, virus_manager.CONST_UNDO)
